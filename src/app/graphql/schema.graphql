scalar ObjectId
scalar Timestamp
scalar JSON

type User {
  _id: ObjectId!
  name: String
  email: String
  image: String
}

type Profile {
  _id: ObjectId!
  name: String
  email: String
  image: String
}

type Class {
  _id: ObjectId!
  name: String!
  description: String
  owner_id: ObjectId!
  owner: User!
  teachers: [User!]!
  students: [User!]!
  notes: [Note!]!
  tests: [Test!]!
  created_on: Timestamp!
  academic_year: String
  subject: String
  active: Boolean!
  student_enrollment_url: String
  teacher_enrollment_url: String
}

type Note {
  _id: ObjectId!
  title: String!
  hide_title: Boolean!
  delta: JSON
  variant: String
  author_id: ObjectId!
  author: User!
  class_id: ObjectId
  class: Class
  private: Boolean!
  created_on: Timestamp!
  updated_on: Timestamp!
  tests: [Test!]
}

type Test {
    _id: ObjectId!
    note_id: ObjectId!
    note: Note!
    title: String
    created_on: Timestamp!
    author_id: ObjectId!
    author: User!
    open_on: Timestamp
    close_on: Timestamp
    class_id: ObjectId
    class: Class
    private: Boolean!
    submissions: [Submission!]
    stats: TestStats!
}

type AnswerItem {
  note_id: ObjectId!
  answer: Int # per adesso solo choice Ã¨ implementata
  permutation: [Int!] # per le risposte a scelta multipla, contiene l'ordine delle risposte
  correct_answer: Int
}

input AnswerItemInput {
  note_id: ObjectId!
  answer: Int
}

type Submission {
    _id: ObjectId!
    test_id: ObjectId!
    test: Test!
    document: JSON!
    answers: [AnswerItem!]!
    author_id: ObjectId!
    author: User!
    started_on: Timestamp!
    completed_on: Timestamp
    score: Float
}

type TestStats {
    completed_submissions: Int!
    incompleted_submissions: Int!
    exercises: [ExerciseStats!]!
    min_submissions_for_stats: Int!
    score_distribution: [ScoreDistributionEntry!]!
}

type ScoreDistributionEntry {
    score_min: Float!
    score_max: Float!
    count: Int!
}

type ExerciseStats {
    correct_answers: Int!
    total_answers: Int!
    empty_answers: Int!
    average_score: Float
    correlation_to_total: Float
}

type AccessToken {
    _id: ObjectId!
    resource_id: ObjectId!
    secret: String!
    permission: String!
    created_on: Timestamp!
}

type Query {
  hello: String!
  note(_id: ObjectId!): Note
  notes(mine: Boolean, private: Boolean, title: String, variant: String, class_id: ObjectId, limit: Int, skip: Int): [Note!]!
  profile: Profile
  test(_id: ObjectId!): Test
  tests(mine: Boolean, open: Boolean, class_id: ObjectId, limit: Int): [Test!]!
  submission(_id: ObjectId!): Submission
  accessToken(secret: String!): AccessToken!
  accessTokens(resource_id: ObjectId!): [AccessToken!]!
  class(_id: ObjectId!): Class
  classes: [Class!]!
}

type Mutation {
  newNote(title: String, delta: JSON, private: Boolean, variant: String, hide_title: Boolean, class_id: ObjectId): ObjectId!
  updateNote(_id: ObjectId!, title: String, hide_title: Boolean, delta: JSON, private: Boolean, variant: String, class_id: ObjectId): Note
  deleteNote(_id: ObjectId!): Boolean

  newTest(note_id: ObjectId!, title: String, private: Boolean, class_id: ObjectId): Boolean
  updateTest(_id: ObjectId!, title: String, open_on: Timestamp, close_on: Timestamp, private: Boolean,class_id: ObjectId): Test
  deleteTest(_id: ObjectId!): Boolean

  newSubmission(test_id: ObjectId!): ObjectId!
  updateSubmission(_id: ObjectId!, answers: [AnswerItemInput!], completed: Boolean): Boolean
  deleteSubmission(_id: ObjectId!): Boolean

  newAccessToken(resource_id: ObjectId!, permission: String!): AccessToken!
  deleteAccessToken(_id: ObjectId!): Boolean

  newClass(name: String!, description: String, subject: String, academic_year: String): ObjectId!
  updateClass(_id: ObjectId!, name: String, description: String, active: Boolean): Class
  deleteClass(_id: ObjectId!): Boolean
  
  addTeacherToClass(class_id: ObjectId!, user_id: ObjectId!): Boolean
  removeTeacherFromClass(class_id: ObjectId!, user_id: ObjectId!): Boolean
  addStudentToClass(class_id: ObjectId!, user_id: ObjectId!): Boolean  
  removeStudentFromClass(class_id: ObjectId!, user_id: ObjectId!): Boolean

  generateEnrollmentCode(class_id: ObjectId!, role: String!): String
  deleteEnrollmentCode(class_id: ObjectId!, role: String!): Boolean
  enrollWithCode(code: String!): ObjectId!
}