scalar ObjectId
scalar Timestamp
scalar JSON

type User {
  _id: ObjectId!
  name: String
  image: String
}

type Profile {
  _id: ObjectId!
  name: String
  email: String
  image: String
}

type Note {
  _id: ObjectId!
  title: String!
  hide_title: Boolean!
  delta: JSON
  variant: String
  author_id: ObjectId!
  author: User!
  private: Boolean!
  created_on: Timestamp!
  updated_on: Timestamp!
  tests: [Test!]
}

type Test {
    _id: ObjectId!
    note_id: ObjectId!
    note: Note!
    title: String
    created_on: Timestamp!
    author_id: ObjectId!
    author: User!
    open_on: Timestamp
    close_on: Timestamp
    submissions: [Submission!]
}

type AnswerItem {
  note_id: ObjectId!
  answer: Int # per adesso solo choice Ã¨ implementata
  permutation: [Int!] # per le risposte a scelta multipla, contiene l'ordine delle risposte
  correct_answer: Int
}

input AnswerItemInput {
  note_id: ObjectId!
  answer: Int
}

type Submission {
    _id: ObjectId!
    test_id: ObjectId!
    test: Test!
    document: JSON!
    answers: [AnswerItem!]!
    author_id: ObjectId!
    author: User!
    started_on: Timestamp!
    completed_on: Timestamp
    score: Float
}

type Query {
  hello: String!
  note(_id: ObjectId!): Note
  notes(mine: Boolean, private: Boolean, limit: Int, skip: Int): [Note!]!
  profile: Profile
  test(_id: ObjectId!): Test
  tests(mine: Boolean, open: Boolean, limit: Int): [Test!]!
  submission(_id: ObjectId!): Submission
}

type Mutation {
  newNote(title: String, delta: JSON, private: Boolean, variant: String, hide_title: Boolean): ObjectId!
  updateNote(_id: ObjectId!, title: String, hide_title: Boolean, delta: JSON, private: Boolean, variant: String): Note
  deleteNote(_id: ObjectId!): Boolean

  newTest(note_id: ObjectId!, title: String): Boolean
  deleteTest(_id: ObjectId!): Boolean

  newSubmission(test_id: ObjectId!): ObjectId!
  updateSubmission(_id: ObjectId!, answers: [AnswerItemInput!], completed: Boolean): Boolean
  deleteSubmission(_id: ObjectId!): Boolean
}